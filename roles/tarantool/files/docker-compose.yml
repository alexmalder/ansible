---
version: "3.6"
services:
  tarantool:
    image: tarantool/tarantool:2
    container_name: tarantool
    command: tarantool /opt/tarantool/app/init.lua
    restart: always
    environment:
      TARANTOOL_USER_NAME: tarantool
      TARANTOOL_USER_PASSWORD: tarantool
    volumes:
      - ./init.lua:/opt/tarantool/app/init.lua
      - ./api.lua:/opt/tarantool/.rocks/share/tarantool/override/api.lua
      - ./validation.lua:/opt/tarantool/.rocks/share/tarantool/override/validation.lua
      - tarantool_data:/var/lib/tarantool
    ports:
      - 127.0.0.1:3301:3301
      - 127.0.0.1:8090:8090
    healthcheck:
      test: tarantool_is_up
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      keycloak:
        condition: service_healthy

  krakend:
    image: devopsfaith/krakend:2.4
    container_name: krakend
    restart: always
    volumes:
      - ./krakend.json:/etc/krakend/krakend.json
    ports:
      - 127.0.0.1:8082:8082
    healthcheck:
      test: netstat -tulpn | grep 8082 || exit 1
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      haproxy:
        condition: service_healthy

  postgres-keycloak:
    image: postgres:14
    container_name: postgres-keycloak
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:legacy
    container_name: keycloak
    restart: always
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      PROXY_ADDRESS_FORWARDING: 'true'
      KEYCLOAK_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KEYCLOAK_LOGLEVEL: ALL
      #JDBC_PARAMS: "ssl=true"
    healthcheck:
      test: curl -f http://keycloak:8080 || exit 1
      interval: 10s
      timeout: 5s
      retries: 30
    ports:
      - 127.0.0.1:8081:8080
    depends_on:
      - postgres-keycloak

  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"

  haproxy:
    build:
      context: ./haproxy
      dockerfile: Dockerfile
    container_name: haproxy
    restart: always
    healthcheck:
      test: curl -f https://haproxy:443 --insecure || exit 1
      interval: 10s
      timeout: 5s
      retries: 30
    ports:
      - 443:443
    depends_on:
      tarantool:
        condition: service_healthy

  ansible-test:
    build:
      context: ./ansible
      dockerfile: Dockerfile
    container_name: ansible-test
    restart: 'no'
    depends_on:
      krakend:
        condition: service_healthy

volumes:
  tarantool_data: null
  postgres_data: null
