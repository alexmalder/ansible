- hosts: 127.0.0.1
  connection: local
  vars:
    keycloak_admin_username: admin
    keycloak_admin_password: admin
    keycloak_url: http://localhost:8080
    sinapi_url: http://localhost:8090
  tasks:
    - name: Apply keycloak client, authentication with credentials, direct and service account enabled
      community.general.keycloak_client:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_realm: master
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        client_id: admin-rest-client
        client_authenticator_type: client-jwt
        direct_access_grants_enabled: true
        service_accounts_enabled: true
        state: present
      register: keycloak_client
      tags:
        - keycloak

    - name: Debug keycloak_client
      debug:
        var: keycloak_client
      tags:
        - keycloak

    - name: Create a Keycloak realm role, authentication with credentials
      community.general.keycloak_role:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_realm: master
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        client_id: admin-rest-client
        name: admin-rest-client-master-role
        realm: master
        state: present
      register: keycloak_role
      tags:
        - keycloak

    - name: Debug keycloak_role
      debug:
        var: keycloak_role
      tags:
        - keycloak

    - name: Create user
      community.general.keycloak_user:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        auth_realm: master
        realm: master
        username: alexmalder
        firstName: Alex
        lastName: Malder
        email: alexmalder@mail.ru
        enabled: true
        emailVerified: false
        credentials:
            - type: password
              value: denied
              temporary: false
        state: present
      register: keycloak_user
      tags:
        - keycloak

    - name: Debug keycloak_user
      debug:
        var: keycloak_user
      tags:
        - keycloak

    - name: Map a client role to a user, authentication with credentials
      community.general.keycloak_user_rolemapping:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        auth_realm: master
        realm: master
        state: present
        client_id: admin-rest-client
        target_username: alexmalder
        roles:
          - name: admin-rest-client-master-role
      register: keycloak_user_rolemapping
      tags:
        - keycloak

    - name: Debug keycloak_user_rolemapping
      debug:
        var: keycloak_user_rolemapping
      tags:
        - keycloak

    - name: Login to keycloak behind krakend api gateway
      ansible.builtin.uri:
        #url: "{{ krakend_url }}/api/v1/auth/sign-in"
        url: "{{ keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: admin-rest-client
          username: alexmalder
          password: denied
          grant_type: password
        status_code:
          - 200
          - 201
      register: login
      tags:
        - keycloak

    - name: Debug login
      debug:
        var: login.json
      tags:
        - keycloak

    - name: Create discipline first
      ansible.builtin.uri:
        url: "{{ sinapi_url }}/api/{{ 1234 | to_uuid }}/disciplines"
        method: POST
        body_format: json
        headers:
          #Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "title-{{ ansible_date_time.epoch }}-first"
          description: discipline_first
        status_code:
          - 200
          - 201
      register: discipline_first
      tags:
        - sinapi

    - name: Create course first
      ansible.builtin.uri:
        url: "{{ sinapi_url }}/api/{{ 1234 | to_uuid }}/courses/{{ discipline_first.json.id }}"
        method: POST
        body_format: json
        headers:
          #Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "title-{{ ansible_date_time.epoch }}-first"
          position: 1
        status_code:
          - 200
          - 201
      register: course_first
      tags:
        - sinapi

    - name: Create poll first
      ansible.builtin.uri:
        url: "{{ sinapi_url }}/api/{{ 1234 | to_uuid }}/polls/{{ course_first.json.id }}"
        method: POST
        body_format: json
        headers:
          #Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "title-{{ ansible_date_time.epoch }}-first"
        status_code:
          - 200
          - 201
      register: poll_first
      tags:
        - sinapi

    - name: Create poll instance first
      ansible.builtin.uri:
        url: "{{ sinapi_url }}/api/{{ 1234 | to_uuid }}/instances/{{ poll_first.json.id }}"
        method: POST
        body_format: json
        headers:
          #Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          groupName: "my group name"
        status_code:
          - 200
          - 201
      register: instance_first
      tags:
        - sinapi

    - name: Create question first
      ansible.builtin.uri:
        url: "{{ sinapi_url }}/api/{{ 1234 | to_uuid }}/questions/{{ poll_first.json.id }}"
        method: POST
        body_format: json
        headers:
          #Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          question: "question-{{ ansible_date_time.epoch }}-first"
        status_code:
          - 200
          - 201
      register: question_first
      tags:
        - sinapi

    - name: Create question second
      ansible.builtin.uri:
        url: "{{ sinapi_url }}/api/{{ 1234 | to_uuid }}/questions/{{ poll_first.json.id }}"
        method: POST
        body_format: json
        headers:
          #Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          question: "question-{{ ansible_date_time.epoch }}-second"
        status_code:
          - 200
          - 201
      register: question_first
      tags:
        - sinapi

    - name: Get subject and roles
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/keycloak"
        method: GET
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
        status_code:
          - 200
          - 201
      register: subject_and_roles
      tags:
        - krakend

    - name: Debug subject_and_roles
      debug:
        var: subject_and_roles.json
      tags:
        - krakend

    - name: POST label previous
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/labels"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "title-{{ ansible_date_time.epoch }}-previous"
          description: previous
        status_code:
          - 200
          - 201
      register: label_previous
      tags:
        - krakend

    - name: Debug label_previous
      debug:
        var: label_previous
      tags:
        - krakend

    - name: PUT label previous
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/labels/{{ label_previous.json.data.id }}"
        method: PUT
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "new_title-{{ ansible_date_time.epoch }}-previous"
          description: updated_previous
        status_code:
          - 200
          - 201
      register: updated_label_previous
      tags:
        - krakend

    - name: Assert new value in label_previous
      ansible.builtin.assert:
        that:
          - updated_label_previous.json.data.description == "updated_previous"
      tags:
        - krakend

    - name: POST label latest
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/labels"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "title-{{ ansible_date_time.epoch }}-latest"
          description: latest
        status_code:
          - 200
          - 201
      register: label_latest
      tags:
        - krakend

    - name: Debug label label
      debug:
        var: label_latest
      tags:
        - krakend

    - name: POST feed
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/feed"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "new_title-{{ ansible_date_time.epoch }}"
          link: new_link
        status_code:
          - 200
          - 201
      register: feed
      tags:
        - krakend

    - name: PUT feed
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/feed/{{ feed.json.data.id }}"
        method: PUT
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "new_title-{{ ansible_date_time.epoch }}"
          link: updated_link
        status_code:
          - 200
          - 201
      register: updated_feed
      tags:
        - krakend

    - name: Assert new value in feed key
      ansible.builtin.assert:
        that:
          - updated_feed.json.data.link == "updated_link"

    - name: Debug feed
      debug:
        var: feed
      tags:
        - krakend

    - name: POST feed_label
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/fl"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          feed_id: "{{ feed.json.data.id }}"
          label_id: "{{ label_previous.json.data.id }}"
        status_code:
          - 200
          - 201
      register: feed_label
      tags:
        - krakend

    - name: Debug feed_label
      debug:
        var: feed_label
      tags:
        - krakend

    - name: PUT feed_label
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/fl?feed_id={{ feed.json.data.id }}&label_id={{ label_previous.json.data.id }}"
        method: PUT
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          feed_id: "{{ feed.json.data.id }}"
          label_id: "{{ label_latest.json.data.id }}"
        status_code:
          - 200
          - 201
      register: updated_feed_label
      tags:
        - krakend

    - name: Debug updated_feed_label
      debug:
        var: updated_feed_label
      tags:
        - krakend

    - name: Assert new value in feed_label key
      ansible.builtin.assert:
        that:
          - updated_feed_label.json.data.label_id == label_latest.json.data.id

    - name: GET feed
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/feed/{{ feed.json.data.id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        status_code:
          - 200
          - 201
      register: feed
      tags:
        - krakend

    - name: Debug feed
      debug:
        var: feed
      tags:
        - krakend

    - name: GET feed_label
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/fl/{{ feed.json.data.id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        status_code:
          - 200
          - 201
      register: feed_label
      tags:
        - krakend

    - name: Debug feed_label
      debug:
        var: feed_label
      tags:
        - krakend

