- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Apply keycloak client, authentication with credentials, direct and service account enabled
      community.general.keycloak_client:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_realm: master
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        client_id: admin-rest-client
        client_authenticator_type: client-jwt
        #client_authenticator_type: client-secret # client-jwt
        direct_access_grants_enabled: true
        service_accounts_enabled: true
        state: present
      register: keycloak_client

    - name: Debug keycloak_client
      debug:
        var: keycloak_client

    - name: Create a Keycloak realm role, authentication with credentials
      community.general.keycloak_role:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_realm: master
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        client_id: admin-rest-client
        name: admin-rest-client-master-role
        realm: master
        state: present
      register: keycloak_role

    - name: Debug keycloak_role
      debug:
        var: keycloak_role

    - name: Create user
      community.general.keycloak_user:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        auth_realm: master
        realm: master
        username: alexmalder
        firstName: Alex
        lastName: Malder
        email: alexmalder@mail.ru
        enabled: true
        emailVerified: false
        credentials:
            - type: password
              value: denied
              temporary: false
        state: present
      register: keycloak_user

    - name: Debug keycloak_user
      debug:
        var: keycloak_user

    - name: Map a client role to a user, authentication with credentials
      community.general.keycloak_user_rolemapping:
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_username: "{{ keycloak_admin_username }}"
        auth_password: "{{ keycloak_admin_password }}"
        auth_realm: master
        realm: master
        state: present
        client_id: admin-rest-client
        target_username: alexmalder
        roles:
          - name: admin-rest-client-master-role
      register: keycloak_user_rolemapping

    - name: Debug keycloak_user_rolemapping
      debug:
        var: keycloak_user_rolemapping

    #- name: Get a Keycloak client secret, authentication with credentials
    #  community.general.keycloak_clientsecret_info:
    #    auth_keycloak_url: "{{ keycloak_url }}"
    #    auth_username: "{{ keycloak_admin_username }}"
    #    auth_password: "{{ keycloak_admin_password }}"
    #    auth_realm: master
    #    client_id: admin-rest-client
    #    realm: master
    #  register: keycloak_clientsecret_info

    #- name: Debug keycloak_clientsecret_info
    #  debug:
    #    var: keycloak_clientsecret_info

    - name: Login to keycloak behind krakend api gateway
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/auth/sign-in"
        #url: "{{ keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: admin-rest-client
          #client_secret: "{{ keycloak_clientsecret_info.clientsecret_info.value }}"
          username: alexmalder
          password: denied
          grant_type: password
        status_code:
          - 200
          - 201
      register: login

    - name: Debug login
      debug:
        var: login.json

    - name: Get subject and roles
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/keycloak"
        method: GET
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
        status_code:
          - 200
          - 201
      register: subject_and_roles

    - name: Debug subject_and_roles
      debug:
        var: subject_and_roles.json

    - name: Post check login
      ansible.builtin.uri:
        url: "{{ krakend_url }}"
        method: POST
        body_format: json
        body:
          login: login
          password: password
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        status_code:
          - 200
          - 201
      register: check_login

    - name: Debug check_login
      debug:
        var: check_login

    - name: Post label
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/labels"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "new_title-{{ ansible_date_time.epoch }}"
          description: new_description
        status_code:
          - 200
          - 201
      register: label

    - name: Debug label
      debug:
        var: label

    - name: Post feed
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/feed"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          title: "new_title-{{ ansible_date_time.epoch }}"
          link: new_link
        status_code:
          - 200
          - 201
      register: feed

    - name: Debug feed
      debug:
        var: feed

    - name: Post feed_label
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/fl"
        method: POST
        body_format: json
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        body:
          feed_id: "{{ feed.json.data.id }}"
          label_id: "{{ label.json.data.id }}"
        status_code:
          - 200
          - 201
      register: feed_label

    - name: Debug feed_label
      debug:
        var: feed_label

    - name: Get feed_label
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/fl/{{ feed.json.data.id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        status_code:
          - 200
          - 201
      register: feed_label

    - name: Debug feed_label
      debug:
        var: feed_label

    - name: Get feed
      ansible.builtin.uri:
        url: "{{ krakend_url }}/api/v1/feed"
        method: GET
        headers:
          Authorization: "Bearer {{ login.json.access_token }}"
          Content-Type: "application/json"
        status_code:
          - 200
          - 201
      register: feed

    - name: Debug feed
      debug:
        var: feed
