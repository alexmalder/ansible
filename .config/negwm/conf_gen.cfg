from enum import Enum
import inspect
from negwm.lib.keymap import keymap, bindmap

Δ, λ = bindmap, keymap
M1, M4, Sh, Ct = "Mod1", "Mod4", "Shift", "Control"
Font = "Iosevka Bold 12"
Exec = "exec --no-startup-id"
e = enumerate


def plain():
    return inspect.cleandoc(
        f"""
        floating_modifier {M4}
        focus_follows_mouse no
        font pango: {Font}
        hide_edge_borders both

        set  $bg     #000000ee
        set  $fg     #899CA1
        set  $fb     #005faf
        set  $ib     #285981
        set  $ub     #2E2457
        set  $blue   #285981
        set  $actbr  #020204

        client.focused           $fb  $bg  $fg    $bg  $actbr
        client.focused_inactive  $ib  $bg  $fg    $bg  $bg
        client.placeholder       $bg  $bg  $fg    $bg  $bg
        client.unfocused         $bg  $bg  $blue  $bg  $bg
        client.urgent            $bg  $ub  $fg    $ub  $ib

        client.background        $bg

        exec dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK
        exec xfce4-power-manager
        exec setxkbmap -option ctrl:swapcaps
        exec gnome-keyring-daemon -r -d
        exec feh --bg-scale ~/.config/i3/purple-19.jpg
        exec syndaemon -i 1
        exec picom --experimental-backend
        bindsym Mod4+Return exec --no-startup-id i3-sensible-terminal
        bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
        bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
        bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
        bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
        exec systemctl --user import-environment I3SOCK
        exec systemctl restart negwm --user
        exec systemctl restart polybar --user
        bindsym Mod4+Shift+space floating toggle
        """
    )


def rules():
    return inspect.cleandoc(
        f"""
        for_window [class=".*"] title_format "<span foreground=\'#395573\'> >_ </span> %title", border pixel 2

        for_window [class="(?i)(alacr|k)itty"] border none
        for_window [class="(?i)\\.exe"] floating enable, border none, move position center
        for_window [class="^(inkscape|gimp)$"] move workspace $draw
        for_window [class="(?i)(?:qt5ct|gcolor3|rdesktop|openssh-askpass|lutris|steam_app_.*|wine)"] floating enable
        for_window [class=zoom] border none
        for_window [class=zoom title="(?i)(participants|settings)"] floating enable
        for_window [instance="^(gpartedbin|recoll)$"] move workspace $sys, floating enable, focus
        for_window [title="(?i)(?:File Transfer.*)"] floating enable
        for_window [window_role="browser"] border none
        for_window [window_role="^(pop-up|task_dialog)$"] floating enable
        no_focus [window_type="splash"]
        """
    )


def workspaces():
    return [
        "︁ α:term",
        " β:web",
        " δ:dev",
        " γ:doc",
        " ζ:draw",
        "߷ θ:gfx",
        "✽ ρ:obs",
        " ξ:pic",
        " ι:steam",
        " η:sys",
        " λ:vm",
        " μ:mail",
    ]


def mode_default():
    return Δ(
        [
            λ(
                {
                    f"{M4}+{Sh}+{key}": ["left", "down", "up", "right"][n]
                    for n, key in e("hjkl")
                },
                fmt="focus {cmd}",
            ),
            # move workspace to left and right monitors
            λ(
                {
                    f"{M4}+{Sh}+bracketleft": "left",
                    f"{M4}+{Sh}+bracketright": "right",
                },
                fmt="move workspace to output {cmd}",
            ),
            λ(
                {
                    f"{M4}+{Sh}+apostrophe": "restart",
                }
            ),
            λ(
                {
                    f"{M4}+grave": "focus_next_visible",
                    f"{M4}+{Sh}+grave": "focus_prev_visible",
                    f"{M1}+Tab": "switch",
                    f"{M4}+slash": "switch",
                },
                fmt="$remember_focused {cmd}",
            ),
            λ(
                {
                    f"{M4}+{Ct}+a": "dialog",
                    f"{M4}+s": "hide_current",
                    f"{M4}+3": "next",
                },
                fmt="$scratchpad {cmd}",
            ),
            λ(
                {
                    f"{M4}+{Ct}+q": "kill",
                    f"{M4}+5": '[floating] floating disable, unmark "^_all_$"',
                    f"{M4}+{Sh}+g": "mark --replace _all_, move scratchpad",
                    f"{M4}+g": '[con_mark="^_all_$"] scratchpad show',
                    f"{M4}+q": "fullscreen toggle",
                    f"{M4}+y": "sticky toggle",
                }
            ),
            λ(
                {
                    f"{M1}+{Ct}+g": "$menu/winact ws",
                    f"{M1}+g": "$menu/winact win",
                    f"{M4}+{Ct}+grave": "$menu/i3menu",
                    f"{M4}+{Sh}+a": "$menu/winact attach",
                    f"{M4}+{Sh}+s": "$menu/props",
                    f"{M4}+{Sh}+d": "$menu/props del",
                    f"{M4}+{Sh}+a": "attach",
                    f"{M4}+{Sh}+s": "$menu move_window",
                }
            ),
        ]
    )


def mode_resize():
    return Δ(
        [
            λ(
                {
                    "bottom": ["j", "s"],
                    "left": ["h", "a"],
                    "right": ["l", "d"],
                    "top": ["k", "w"],
                },
                fmt="$actions resize {cmd} 20",
            ),
            λ(
                {
                    "bottom": [f"{Sh}+j", f"{Sh}+s"],
                    "left": [f"{Sh}+h", f"{Sh}+a"],
                    "right": [f"{Sh}+l", f"{Sh}+d"],
                    "top": [f"{Sh}+k", f"{Sh}+w"],
                },
                fmt="$actions resize {cmd} -20",
            ),
        ],
        bind=f"{M4}+r",
        name="%{T4}%{T-}",
    )


def mode_spec():
    return Δ(
        [
            λ(
                {
                    "e": "[urgent=latest] focus",
                },
                exit=True,
            ),
            λ(
                {
                    f"{Sh}+t": "gtk_theme",
                    f"{Sh}+i": "icon_theme",
                    "i": "pulse_input",
                    "o": "pulse_output",
                    "m": "xprop_show",
                },
                fmt="$menu {cmd}",
                exit=True,
            ),
        ],
        bind=f"{M1}+e",
        name="%{T4}%{T-}",
    )


def mode_wm():
    return Δ(
        [
            λ(
                {
                    f"grave": "default",
                    f"minus": "splith",
                    f"backslash": "splitv",
                    f"t": "tabbed",
                },
                fmt="layout {cmd}",
                exit=True,
            ),
            λ({f"Tab": "toggle"}, fmt="layout {cmd}", exit=False),
            λ(
                {
                    "horizontal": [f"{Sh}+h", f"{Sh}+l"],
                    "vertical": [f"{Sh}+j", f"{Sh}+k"],
                },
                fmt="split",
                exit=True,
            ),
            λ(
                {act: ["up", "left", "down", "right"][n] for n, act in e("wasd")},
                fmt="move {cmd}",
            ),
            λ(
                {
                    f"{Sh}+plus": "grow",
                    "x": "maxhor",
                    "m": "maximize",
                    "y": "maxvert",
                    "c": "none",
                    f"{Sh}+c": "resize",
                    "revert_maximize": [f"{Sh}+m", f"{Sh}+x", f"{Sh}+y"],
                    "shrink": [f"{Sh}+minus"],
                },
                fmt="$actions",
            ),
            λ(
                {
                    "hdown": [f"{Sh}+w"],
                    "hup": [f"{Sh}+a"],
                    "vleft": [f"{Sh}+s"],
                    "vright": [f"{Sh}+d"],
                },
                fmt="$actions {cmd} x2",
            ),
        ],
        bind=f"{M4}+minus",
        name="%{T4}%{T-}",
    )


class conf_gen(Enum):
    plain = plain()
    rules = rules()
    workspaces = workspaces()
    mode_default = mode_default()
    mode_resize = mode_resize()
    mode_spec = mode_spec()
    mode_wm = mode_wm()


# vim:filetype=python
