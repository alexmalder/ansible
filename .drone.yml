---
kind: pipeline
type: kubernetes
name: kube

steps:
- name: deploy kube-prometheus-stack
  image: dtzar/helm-kubectl
  commands:
    - helm list -n $NAMESPACE 
      --kube-apiserver $K8S_SERVER 
      --kube-token $K8S_TOKEN
      --kube-insecure-skip-tls-verify
    - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    - helm repo update
    - helm search repo prometheus-community/kube-prometheus-stack
    - helm upgrade 
      --kube-apiserver $K8S_SERVER 
      --kube-token $K8S_TOKEN 
      --kube-insecure-skip-tls-verify 
      --install 
      --namespace $NAMESPACE
      --create-namespace 
      kube-prometheus-stack prometheus-community/kube-prometheus-stack
      --set prometheus.ingress.enabled=true
      --set prometheus.ingress.ingressClassName=nginx
      --set prometheus.ingress.hosts[0]=prometheus.vnmntn.com
      --set alertmanager.ingress.enabled=true
      --set alertmanager.ingress.ingressClassName=nginx
      --set alertmanager.ingress.hosts[0]=alertmanager.vnmntn.com
      --set grafana.ingress.enabled=true
      --set grafana.ingress.ingressClassName=nginx
      --set grafana.ingress.hosts[0]=grafana.vnmntn.com
      -f ./services/kube-prometheus-stack/values.yaml
  environment:
    K8S_SERVER:
      from_secret: K8S_SERVER
    K8S_TOKEN:
      from_secret: K8S_TOKEN
    NAMESPACE:
      from_secret: NAMESPACE
#  when:
#    branch:
#      - master
#    event:
#      - push

- name: deploy postgres reader
  image: dtzar/helm-kubectl
  commands:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo update
    - helm search repo postgresql
    - helm upgrade 
      --kube-apiserver $K8S_SERVER 
      --kube-token $K8S_TOKEN 
      --kube-insecure-skip-tls-verify 
      --install 
      --namespace $NAMESPACE 
      --create-namespace 
      postgresql-reader bitnami/postgresql 
      --set auth.username=$PG_READER_USER 
      --set auth.password=$PG_READER_PASSWORD 
      --set auth.database=$PG_READER_DB
  environment:
    K8S_SERVER:
      from_secret: K8S_SERVER
    K8S_TOKEN:
      from_secret: K8S_TOKEN
    NAMESPACE:
      from_secret: NAMESPACE
    PG_READER_DB:
      from_secret: PG_READER_DB
    PG_READER_PASSWORD:
      from_secret: PG_READER_PASSWORD
    PG_READER_USER:
      from_secret: PG_READER_USER
  when:
    branch:
      - master
    event:
      - push

- name: deploy postgres scraper
  image: dtzar/helm-kubectl
  commands:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo update
    - helm search repo postgresql
    - helm upgrade 
      --kube-apiserver $K8S_SERVER 
      --kube-token $K8S_TOKEN 
      --kube-insecure-skip-tls-verify 
      --install 
      --namespace $NAMESPACE 
      --create-namespace 
      postgresql-scraper bitnami/postgresql 
      --set auth.username=$PG_SCRAPER_USER 
      --set auth.password=$PG_SCRAPER_PASSWORD 
      --set auth.database=$PG_SCRAPER_DB
  environment:
    K8S_SERVER:
      from_secret: K8S_SERVER
    K8S_TOKEN:
      from_secret: K8S_TOKEN
    NAMESPACE:
      from_secret: NAMESPACE
    PG_SCRAPER_DB:
      from_secret: PG_SCRAPER_DB
    PG_SCRAPER_PASSWORD:
      from_secret: PG_SCRAPER_PASSWORD
    PG_SCRAPER_USER:
      from_secret: PG_SCRAPER_USER
  when:
    branch:
      - master
    event:
      - push
---
kind: pipeline
type: kubernetes
name: ansible

steps:
- name: ansible lint
  image: alpine:3.17
  commands:
    - apk add git ansible ansible-lint
    - ansible-galaxy collection install ansible.posix
    - ansible-galaxy collection install community.general
    - ansible-lint *.yml
  when:
    branch:
      - master
    event:
      - push 

- name: markdown lint
  image: node:18
  commands:
    - npm i -g markdownlint-cli
    - find . | grep "\.md" | xargs -I % sh -c "markdownlint %"
  when:
    branch:
      - master
    event:
      - push 

#- name: run init role
#  image: alpine
#  commands:
#    - apk add ansible
#    - ansible-playbook init.yml
#  when:
#    branch:
#      - master
#    event:
#      - push 
